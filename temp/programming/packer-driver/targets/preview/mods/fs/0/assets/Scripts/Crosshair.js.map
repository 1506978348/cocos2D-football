{"version":3,"sources":["file:///Users/lamngo/Desktop/Cocos/FootballStar%20copy/assets/Scripts/Crosshair.ts"],"names":["_decorator","Component","Animation","Node","Prefab","instantiate","Vec3","CircleCollider2D","director","animation","Ball","GameController","Player","ccclass","property","Crosshair","type","AnimationController","start","newBall","spawnNewBall","CalculateDistance","distance","Math","sqrt","position","x","node","y","getComponent","radius","player","Jump","playerAnim","play","ballHit","Instance","AddScore","perfect","active","scheduleOnce","goal","controller","setValue","pause","loadScene","update","deltaTime","crosshairPos","z","ballPrefab","parent","random"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Component, Animation, Node, Prefab, instantiate, Vec3, Collider2D, Contact2DType, RigidBody2D, SystemEventType, systemEvent, SystemEvent, EventMouse, CircleCollider2D, director, animation } from 'cc';\r\nimport { BackgroundRolling } from './BackgroundRolling';\r\nimport { Ball } from \"./Ball\";\r\nimport { GameController } from './GameController';\r\nimport { Player } from './Player';\r\nconst { ccclass, property } = _decorator;\r\n \r\n@ccclass('Crosshair')\r\nexport class Crosshair extends Component {\r\n\r\n    @property({type: Prefab})\r\n    public ballPrefab: Prefab|null = null;\r\n\r\n    @property({type: Node})\r\n    public goal: Node|null = null;\r\n\r\n    @property({type: Node})\r\n    public perfect: Node|null = null;\r\n\r\n    @property({type: Node})\r\n    public player: Node|null = null;\r\n\r\n    @property({type: Animation})\r\n    playerAnim: Animation=null!;\r\n\r\n    @property({type: animation.AnimationController})\r\n    controller: animation.AnimationController=null!;\r\n\r\n    newBall: Node;\r\n\r\n    //spawn ball and store in a node\r\n    start () \r\n    {\r\n        this.newBall = this.spawnNewBall();  \r\n    }\r\n\r\n    //calculate to see if the ball is within the range of the crosshair\r\n    CalculateDistance()\r\n    {\r\n        let distance = \r\n        Math.sqrt((this.newBall.position.x - this.node.position.x)*(this.newBall.position.x - this.node.position.x) + \r\n        (this.newBall.position.y - this.node.position.y)*(this.newBall.position.y - this.node.position.y));\r\n\r\n        //if ball is within radius - hit\r\n        if (distance < this.node.getComponent(CircleCollider2D).radius)\r\n        {\r\n            //player jump\r\n            if (this.newBall.position.y > 150)\r\n            {\r\n                this.player.getComponent(Player).Jump(this.newBall.position.y - this.player.position.y);\r\n            }\r\n\r\n            //play shoot anim\r\n            this.playerAnim.play('kicking');\r\n\r\n            //ball is hit and add score\r\n            this.newBall.getComponent(Ball).ballHit();\r\n            GameController.Instance.AddScore();\r\n            \r\n            if (distance < this.node.getComponent(CircleCollider2D).radius/2)\r\n            {\r\n                //turn on goal art\r\n                this.perfect.active = true;\r\n                this.scheduleOnce(function() {            \r\n                    this.perfect.active = false;\r\n                }, 0.5);  \r\n            }\r\n\r\n            //turn on goal art\r\n            this.goal.active = true;\r\n            this.scheduleOnce(function() {            \r\n                this.goal.active = false;\r\n            }, 0.5);  \r\n\r\n        }\r\n\r\n        //else, fall\r\n        else \r\n        {\r\n            //fall anim and disable animation\r\n            this.controller.setValue('fall', true);\r\n            this.playerAnim.play('falling');\r\n            this.playerAnim.pause();\r\n            \r\n            //load play again scene\r\n            this.scheduleOnce(function() {\r\n                director.loadScene('over')\r\n            }, 0.6);        \r\n        }\r\n    }\r\n\r\n    //update crosshair position based on ball\r\n    update (deltaTime: number) {\r\n        let crosshairPos = new Vec3(this.node.position.x, this.node.position.y, this.node.position.z);\r\n        crosshairPos.y = this.newBall.position.y;\r\n        this.node.position = crosshairPos;\r\n        \r\n    }\r\n\r\n    //instantiate new ball at random position from 50 to 500 y axis\r\n    spawnNewBall()\r\n    {\r\n        let newBall = instantiate(this.ballPrefab);\r\n        newBall.parent = this.node.parent;\r\n        newBall.position = new Vec3(600, Math.random()*500 + 50, this.node.position.z);\r\n\r\n        return newBall;\r\n    }\r\n\r\n}\r\n\r\n\r\n"]}